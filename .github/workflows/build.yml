name: Build Automation System Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    # A build matrix allows the job to run multiple times with different configurations.
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    # Specify the runner for each job in the matrix.
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        # This action checks out your repository under $GITHUB_WORKSPACE,
        # so your workflow can access the code.
        uses: actions/checkout@v4

      - name: Set up Python
        # This step sets up the Python environment on the runner.
        # You can change the version as needed for your project.
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install System Dependencies
        # This step installs system-level dependencies for tkinter based on the operating system.
        # For Linux, we use `apt-get` since the runner is Ubuntu.
        # For macOS, we use `brew`.
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y python3-tk
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install python-tk
          fi
        # For Windows, tkinter is typically included with the standard Python installation, so no separate step is needed.

      - name: Install Python Libraries
        # This step installs the required Python packages using pip.
        # In a CI/CD environment, a virtual environment is not necessary as each job runs in an isolated container.
        run: |
          pip install tkinterdnd2 customtkinter pyinstaller

      - name: Build application (Linux/macOS)
        # This step runs the pyinstaller command for non-Windows operating systems.
        # The command uses the --name flag to append the OS name to the executable.
        if: runner.os != 'Windows'
        run: |
          echo "Starting build on ${{ runner.os }}..."
          pyinstaller --onefile --windowed --noconfirm --name HB_dreamSort-${{ runner.os }} HB_dreamSort.py
          echo "Build complete."

      - name: Build application (Windows)
        # This step runs the specific pyinstaller command for Windows.
        # We use PowerShell (`pwsh`) as the shell to correctly handle the command's syntax.
        # The command also uses the --name flag to append the OS name.
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          echo "Starting build on ${{ runner.os }}..."
          # NOTE: The `--add-data` path for `tkinterdnd2` is now relative to the package installation.
          # You may need to adjust this path if PyInstaller fails to find the correct location.
          pyinstaller --onefile --windowed --noconfirm --icon="yoohyeon.ico" --add-data="yoohyeon.ico;." --add-data="tkinterdnd2;tkinterdnd2" --name HB_dreamSort-${{ runner.os }} HB_dreamSort.py
          echo "Build complete."

      - name: Archive artifacts
        # This step can be used to save your built application binaries or other output.
        # The output is located in the `dist/` directory after the build step.
        uses: actions/upload-artifact@v4
        with:
          name: my-app-${{ matrix.os }}
          path: dist/
          retention-days: 7
